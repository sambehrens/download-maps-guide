{"version":3,"sources":["Button.js","Steps.js","InstructionSteps.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","content","children","width","paddingLeft","paddingRight","_this$props","kind","className","buttonProps","Object","objectWithoutProperties","react_default","a","createElement","assign","classnames","style","getWidth","getContent","Component","defaultProps","size","type","Steps","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBackClick","setState","_ref","currentStepIndex","handleNextClick","_ref2","state","totalSteps","_","steps","currentStep","src","concat","window","location","origin","image","alt","imageAltText","title","description","getNavButtons","round","src_Button","key","onClick","disabled","getBackButton","getNextButton","getCurrentStep","InstructionSteps","App","src_Steps","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92cae53e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst propTypes = {\n    onClick: PropTypes.func,\n    kind: PropTypes.oneOf(['primary', 'secondary']),\n    content: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    type: PropTypes.string,\n    id: PropTypes.string,\n    width: PropTypes.string,\n    autoFocus: PropTypes.bool\n};\n\nconst defaultProps = {\n    size: 'medium',\n    kind: 'primary',\n    type: 'button'\n};\n\nclass Button extends Component {\n    getContent() {\n        return this.props.content || this.props.children;\n    }\n\n    getWidth() {\n        if (this.props.width) {\n            return { width: this.props.width, paddingLeft: 'unset', paddingRight: 'unset' };\n        }\n    }\n\n    render() {\n        const { content, kind, className, width, ...buttonProps } = this.props;\n        return (\n            <button className={classnames('button', kind, className)} style={this.getWidth()} {...buttonProps}>\n                {this.getContent()}\n            </button>\n        );\n    }\n}\n\nButton.propTypes = propTypes;\nButton.defaultProps = defaultProps;\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport _ from 'lodash';\n\nconst propTypes = {\n    steps: PropTypes.array\n};\n\nclass Steps extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentStepIndex: 0,\n            totalSteps: _.size(props.steps)\n        };\n    }\n\n    getCurrentStep() {\n        const currentStep = this.props.steps[this.state.currentStepIndex];\n        return (\n            <div className=\"step\">\n                <img\n                    src={`${window.location.origin}/images/${currentStep.image}`}\n                    alt={currentStep.imageAltText}\n                    className=\"image\"\n                />\n                <div className=\"text\">\n                    <h1 className=\"title\">{currentStep.title}</h1>\n                    <div className=\"description-wrapper\">\n                        <p className=\"description\">{currentStep.description}</p>\n                    </div>\n                    {this.getNavButtons()}\n                    <div className=\"progress-wrapper\">\n                        <div\n                            className=\"progress\"\n                            style={{\n                                width: `${_.round(((this.state.currentStepIndex + 1) / this.state.totalSteps) * 100)}%`\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    handleBackClick = () => {\n        this.setState(({ currentStepIndex }) => ({ currentStepIndex: currentStepIndex - 1 }));\n    };\n\n    getBackButton() {\n        return (\n            <Button\n                key=\"back\"\n                width=\"10em\"\n                kind=\"secondary\"\n                onClick={this.handleBackClick}\n                disabled={this.state.currentStepIndex <= 0}>\n                Back\n            </Button>\n        );\n    }\n\n    handleNextClick = () => {\n        this.setState(({ currentStepIndex }) => ({ currentStepIndex: currentStepIndex + 1 }));\n    };\n\n    getNextButton() {\n        return (\n            <Button\n                key=\"next\"\n                width=\"10em\"\n                onClick={this.handleNextClick}\n                disabled={this.state.currentStepIndex >= this.state.totalSteps - 1}>\n                Next\n            </Button>\n        );\n    }\n\n    getNavButtons() {\n        return (\n            <div className=\"buttons\">\n                {this.getBackButton()}\n                {this.getNextButton()}\n            </div>\n        );\n    }\n\n    render() {\n        return <div className=\"steps\">{this.getCurrentStep()}</div>;\n    }\n}\n\nSteps.propTypes = propTypes;\nexport default Steps;\n","export default [\n    {\n        title: 'Get Google Maps',\n        description:\n            'Go to the Apple App store and download Google Maps. Apple maps does not support downloading maps unfortunately.',\n        image: '1-app-store.PNG',\n        imageAltText: 'Google Maps on the Apple App Store'\n    },\n    {\n        title: 'Open Google Maps',\n        description:\n            'Once Google Maps is downloaded, open it, and start entering the location you wish to download in the search bar.',\n        image: '2-landing.PNG',\n        imageAltText: 'Landing page of Google Maps'\n    },\n    {\n        title: 'Find Correct Result',\n        description:\n            \"Once you have entered your location, and without clicking 'enter' or 'search', click on the specific location from the search results.\",\n        image: '3-search.PNG',\n        imageAltText: 'Search for an area in the search bar at the top'\n    },\n    {\n        title: 'Result Location',\n        description:\n            'You will now be looking at your selected location. Click on the name of your location in the white bar near the bottom of your screen.',\n        image: '4-search-result.PNG',\n        imageAltText: 'Result from the search'\n    },\n    {\n        title: 'Open Menu',\n        description: 'Open the menu by clicking the elipsis in the upper right of your screen.',\n        image: '5-result-details.PNG',\n        imageAltText: 'Details of searched location'\n    },\n    {\n        title: 'Click Download',\n        description: \"In the menu, select the top option, labeled 'Download offline map'.\",\n        image: '6-menu.PNG',\n        imageAltText: 'Open menu'\n    },\n    {\n        title: 'Select Area',\n        description:\n            'Drag the map around until all of the area you wanted to download is in the blue box. Be sure to include dities that may be on or outside the edge, like Dublin.',\n        image: '7-select-area.PNG',\n        imageAltText: 'Select area you want to download'\n    },\n    {\n        title: 'Start Download',\n        description:\n            \"After you have adjusted the map to include everything you wish to download, click 'Download' in the bottom right.\",\n        image: '8-adjust.PNG',\n        imageAltText: 'Click download'\n    },\n    {\n        title: 'Finished',\n        description:\n            'Your download will have started, and it may take a while, depending on the size of the map you are downloading.',\n        image: '9-finish.PNG',\n        imageAltText: 'Wait for download to complete.'\n    }\n];\n","import React from 'react';\nimport './sass/app.scss';\nimport Steps from './Steps';\nimport InstructionSteps from './InstructionSteps';\n\nfunction App() {\n    return (\n        <div className=\"app-container\">\n            <Steps steps={InstructionSteps} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}